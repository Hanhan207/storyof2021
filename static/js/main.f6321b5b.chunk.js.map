{"version":3,"sources":["logo.svg","components/column.js","App.js","reportWebVitals.js","index.js"],"names":["FoodColumn","TweenOne","plugins","push","SvgDrawPlugin","ScrollOverPack","ScrollAnim","OverPack","colors","scrollScreen","Mycontent","App","windowheight","document","documentElement","clientHeight","useState","linedata","mypath","path","setpath","useEffect","className","style","height","background","onClick","width","version","display","margin","animation","SVGDraw","duration","fill","strokeWidth","stroke","component","d","delay","type","interval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"gNAAe,I,8BCwEAA,I,6CC5DfC,IAASC,QAAQC,KAAKC,KAGtB,IAAMC,EAAiBC,IAAWC,SAG5BC,GAFeF,IAAWG,aAEjB,CAAC,UAAW,UAAW,YAItC,SAASC,IACP,OAEE,aADA,CACA,mCAsFWC,MAlFf,WACE,IAAMC,EAAeC,SAASC,gBAAgBC,aADjC,EAEQC,mBAAS,MAFjB,gCAGgBA,mBAAS,YAHzB,mBAGRC,EAHQ,KAITC,GAJS,KAIA,CAAC,qFAAqF,8BAJtF,EAKSF,mBAASE,EAAO,IALzB,mBAKRC,EALQ,KAKFC,EALE,KAyBb,OAlBAC,qBAAU,eAmBR,sBAAKC,UAAU,MAAf,UAEE,cAACjB,EAAD,CACEiB,UAAU,YACVC,MAAO,CAAEC,OAAQZ,GAFnB,SAIE,cAAC,IAAD,CAAOU,UAAU,UAAjB,kCAGF,eAACjB,EAAD,CACEiB,UAAU,YACVC,MAAO,CAAEC,OAAQZ,EAAca,WAAYjB,EAAO,IAFpD,UAOE,cAAC,IAAD,CAAOc,UAAU,UAAjB,gCACA,wBAAQI,QAAS,WApBvBN,EAAQF,EAAO,KAoBT,iBACA,qBAAKS,MAAM,MAAMH,OAAO,KAAKI,QAAQ,MACnCL,MAAO,CAAEM,QAAS,QAASC,OAAQ,QADrC,SAGE,cAAC,IAAD,CACEC,UAAW,CAAEC,QAASf,EAAWgB,SAAU,KAC3CV,MAAO,CAAEW,KAAM,OAAQC,YAAa,GAAIC,OAAQ,QAChDC,UAAU,OACVC,EAAGnB,SAKT,eAACd,EAAD,CACEiB,UAAU,YACVC,MAAO,CAAEC,OAAQZ,EAAca,WAAYjB,EAAO,IAFpD,UAKE,cAAC,IAAD,CAAOc,UAAU,UAAjB,gCACA,eAAC,IAAD,CAAYiB,MAAO,IAAKC,KAAK,SAASC,SAAU,IAAKR,SAAU,IAA/D,UACA,8BAAa,cAACvB,EAAD,KAAJ,KACb,8BAAa,cAACA,EAAD,KAAJ,KACT,8BAAa,cAACA,EAAD,KAAJ,KACT,8BAAa,cAACA,EAAD,KAAJ,WAIP,cAACL,EAAD,CACEiB,UAAU,YACVC,MAAO,CAAEC,OAAQZ,EAAea,WAAYjB,EAAO,IAFrD,SAKE,cAAC,IAAD,CAAOc,UAAU,UAAjB,sCC5FOoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAEL,cAAC,EAAD,IAEFvC,SAASwC,eAAe,SAM1BX,M","file":"static/js/main.f6321b5b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import '../App.css';\r\n// import  Texty from 'rc-texty';\r\nimport Column from '@antv/g2plot';\r\nimport { useEffect } from 'react';\r\n// import ScrollAnim from 'rc-scroll-anim';\r\n\r\nconst data =[\r\n    {\r\n        Type: \"螺蛳粉\",\r\n        Count: 8\r\n    },\r\n    {\r\n      Type: \"烤肉\",\r\n        Count: 7\r\n    },\r\n    {\r\n        Type: \"面条\",\r\n        Count: 5\r\n    },\r\n    {\r\n        Type: \"米线\",\r\n        Count: 5\r\n    },\r\n    {\r\n        Type: \"烤串\",\r\n        Count: 4\r\n    }\r\n  ]\r\n\r\n  const colors = ['#F14456','#2149DF','#1BBC6B']\r\n\r\nfunction FoodColumn(){\r\n\r\n    useEffect(() => {\r\n        const columnPlot = new Column('lineCon', {\r\n            data,\r\n            xField: 'Type',\r\n            yField: 'Count',\r\n            label: {\r\n              // 可手动配置 label 数据标签位置\r\n              position: 'middle', // 'top', 'bottom', 'middle',\r\n              // 配置样式\r\n              // style: {\r\n              //   fill: '#FFFFFF',\r\n              //   opacity: 0.6,\r\n              // },\r\n            },\r\n            xAxis: {\r\n              label: {\r\n                autoHide: true,\r\n                autoRotate: false,\r\n              },\r\n              \r\n            },\r\n            color: ({ Type }) => {\r\n              if (Type === '螺蛳粉') {\r\n                return colors[0];\r\n              }\r\n              return colors[1];\r\n            },\r\n            meta:{\r\n          \r\n            },\r\n          });\r\n          \r\n          columnPlot.render();\r\n    })\r\n    return(<div>\r\n        <div id=\"lineCon\"></div>\r\n    </div>)\r\n}\r\n\r\nexport default FoodColumn","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useEffect,useState } from \"react\";\n//自设组件\nimport DateCom from \"./components/date\";\nimport FoodColumn from \"./components/column\";\n//动画库\nimport Texty from \"rc-texty\";\nimport ScrollAnim from \"rc-scroll-anim\";\nimport TweenOne from \"rc-tween-one\";\nimport QueueAnim from \"rc-queue-anim\";\nimport SvgDrawPlugin from 'rc-tween-one/lib/plugin/SvgDrawPlugin';\nTweenOne.plugins.push(SvgDrawPlugin);\n\n// import { Line,Column} from '@antv/g2plot';\nconst ScrollOverPack = ScrollAnim.OverPack;\nconst scrollScreen = ScrollAnim.scrollScreen;\n\nconst colors = [\"#F14456\", \"#2149DF\", \"#1BBC6B\"];\n\n\n\nfunction Mycontent(){\n  return(\n    // <Texty>How many times?</Texty>\n    <h4>How many times?</h4>\n  )\n}\n\nfunction App() {\n  const windowheight = document.documentElement.clientHeight;\nconst [mode,setMode] = useState(null)\nconst [linedata,setlinedata] = useState('30% 70%')\nconst mypath = ['M541.5,36.45313c-5,6 -8,100 -95,128c-87,28 -66,32 -173,37c-107,5 -143,106 -139,146','M10,10c65,50,115,50,180,0']\nconst [path, setpath] = useState(mypath[1])\n\n  useEffect(() => {\n  });\n\n  \nfunction gundaole(e){\n  // console.log(e)\n  if(e === 'enter'){\n    setMode('enter')\n    setlinedata('100%')\n  }else {\n    setlinedata(0)}\n  console.log(linedata)\n}\n\nfunction setline(){\n  // setlinedata('50% 50%')\n  setpath(mypath[0])\n}\n  return (\n    <div className=\"App\">\n      {/* P1 */}\n      <ScrollOverPack\n        className=\"container\"\n        style={{ height: windowheight }}\n      >\n        <Texty className=\"titleP0\">第一页</Texty>\n      </ScrollOverPack>\n      {/* P2 */}\n      <ScrollOverPack\n        className=\"container\"\n        style={{ height: windowheight, background: colors[2] }}\n        \n        // onChange={(e)=>setMode(e.mode)}\n        // onChange={(e)=>gundaole(e.mode)}\n      >\n        <Texty className=\"titleP0\">第二页</Texty>\n        <button onClick={()=>setline()}>set</button>\n        <svg width=\"200\" height=\"84\" version=\"1.2\"\n          style={{ display: 'block', margin: 'auto' }}\n        >\n          <TweenOne\n            animation={{ SVGDraw: linedata , duration: 500 }}\n            style={{ fill: 'none', strokeWidth: 10, stroke: '#FFF' }}\n            component=\"path\"\n            d={path}\n          />\n        </svg>\n      </ScrollOverPack>\n      {/* P3 */}\n      <ScrollOverPack\n        className=\"container\"\n        style={{ height: windowheight, background: colors[1] }}\n        \n      >\n        <Texty className=\"titleP0\">第三页</Texty>\n        <QueueAnim  delay={100} type=\"bottom\" interval={700} duration={800}>\n        <div key=\"a\"><Mycontent/></div>\n    <div key=\"b\"><Mycontent/></div>\n    <div key=\"c\"><Mycontent/></div>\n    <div key=\"d\"><Mycontent/></div>\n        </QueueAnim >\n      </ScrollOverPack>\n      {/* P4 */}\n      <ScrollOverPack\n        className=\"container\"\n        style={{ height: windowheight , background: colors[0] }}\n      >\n        {/* <FoodColumn/> */}\n        <Texty className=\"titleP0\">第四页</Texty>\n        \n      </ScrollOverPack>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}